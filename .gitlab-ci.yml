# SPDX-FileCopyrightText: 2021 Genome Research Ltd.
#
# SPDX-License-Identifier: MIT

include:
  - project: 'tol/tol-core'
    ref: main
    file: '/gitlab/main.yml'

stages:
  - lint
  - build
  - unit test
  - deploy
  - integration test

build-api:
  extends: .build-template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    PART: "tolqc-api"
    DOCKERFILE: "tolqc-api/Dockerfile"
    NAME: "tolqc-api"

build-ui:
  extends: .build-template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    PART: "tolqc-ui"
    DOCKERFILE: 'tolqc-ui/Dockerfile'
    NAME: "tolqc-ui"

build-ui-test:
  extends: .build-template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    PART: "tolqc-ui"
    DOCKERFILE: 'tolqc-ui/Dockerfile.dev'
    NAME: "tolqc-ui-test"

test-ui:
  image: $DOCKER_IMAGE
  stage: unit test
  services:
    - name: $DIND_IMAGE
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run -e CI=true $CI_REGISTRY_IMAGE/tolqc-ui-test:$CI_COMMIT_SHA yarn test
  except:
    - qa
    - staging
    - production
  allow_failure: true

deploy-staging:
  extends: .swarm-deploy-template
  environment:
    name: staging
    url: https://qc-staging.tol.sanger.ac.uk
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.26.124"
    EXTRA_DEPLOY_FILES: "-c docker-compose.gitlab-logging.yml"
    STACK_NAME: tolqc
  script:
    - echo "Deployed to staging"
  only:
    - staging

deploy-production:
  extends: .swarm-deploy-template
  environment:
    name: production
    url: https://qc.tol.sanger.ac.uk/
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.26.62"
    EXTRA_DEPLOY_FILES: "-c docker-compose.gitlab-logging.yml"
    STACK_NAME: tolqc
  script:
    - echo "Deployed to production"
  only:
    - production
  when: manual

test-api:
  extends: .swarm-deploy-template
  image: $DOCKER_IMAGE
  stage: integration test
  resource_group: testing
  services:
    - name: $DIND_IMAGE
      alias: docker
  environment:
    name: testing
    url: http://172.27.25.82:8000
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.25.82"
    EXTRA_DEPLOY_FILES: "-c docker-compose.gitlab-test.yml"
    STACK_NAME: tolqc
  script:
    - sleep 60
    - docker exec $(docker ps -q -f name="tolqc_tolqc-api") 
      bash -c "pytest -v"
  except:
    - qa
    - staging
    - production

variables:
  AUTO_DEPLOY_IMAGE_VERSION: 'v2.25.0'

.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  dependencies: []
  before_script:
    - HELM_UPGRADE_EXTRA_ARGS="${HELM_UPGRADE_EXTRA_ARGS} --set gitlab.envName=null --set deployment.environment=\"${CI_ENVIRONMENT_NAME}\""

deploy-qa:
  extends: .auto-deploy
  stage: deploy
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
    CI_COMMIT_SHA: "a66998216ac0f0bd18bedfcf85e9d37f3982135c" # remove this hardcoding
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy use_kube_context || true
    - auto-deploy ensure_namespace
    - env
    - echo "$(deploy_name stable)"
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy delete canary
    - auto-deploy persist_environment_url
  environment:
    name: qa
    url: http://qc-qa.tol.sanger.ac.uk
  artifacts:
    paths: [environment_url.txt, tiller.log]
    when: always
  only:
    - qa
    - helm-test-edward #TODO remove this!
