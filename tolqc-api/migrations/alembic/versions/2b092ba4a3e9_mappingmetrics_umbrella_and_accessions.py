"""MappingMetrics, Umbrella and accessions

Revision ID: 2b092ba4a3e9
Revises: 0ec89827f532
Create Date: 2024-06-18 11:31:26.090587

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '2b092ba4a3e9'
down_revision = '0ec89827f532'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_constraint('specimen_species_id_fkey', 'specimen')
    with op.batch_alter_table('species', recreate='always') as sp_op:
        sp_op.add_column(
            sa.Column('tolid_prefix', sa.String(), nullable=True),
            insert_after='hierarchy_name',
        )
        sp_op.add_column(sa.Column('data_accession_id', sa.String(), nullable=True))
        sp_op.add_column(sa.Column('umbrella_accession_id', sa.String(), nullable=True))
    op.create_foreign_key(None, 'specimen', 'species', ['species_id'], ['species_id'])

    op.drop_index('ix_species_hierarchy_name', table_name='species')
    op.create_foreign_key(
        None,
        'species',
        'accession',
        ['data_accession_id'],
        ['accession_id'],
    )
    op.create_foreign_key(
        None,
        'species',
        'accession',
        ['umbrella_accession_id'],
        ['accession_id'],
    )
    op.create_unique_constraint(None, 'species', ['hierarchy_name'])
    op.create_unique_constraint(None, 'species', ['tolid_prefix'])

    op.create_table(
        'umbrella',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('project_id', sa.Integer(), nullable=True),
        sa.Column('species_id', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ['project_id'],
            ['project.project_id'],
        ),
        sa.ForeignKeyConstraint(
            ['species_id'],
            ['species.species_id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )

    op.create_table(
        'mapping_metrics',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('data_id', sa.Integer(), nullable=False),
        sa.Column('assembly_id', sa.Integer(), nullable=True),
        sa.Column('software_version_id', sa.Integer(), nullable=True),
        sa.Column('reads_duplicated', sa.BigInteger(), nullable=True),
        sa.Column('average_quality', sa.Float(), nullable=True),
        sa.Column('bases_duplicated', sa.BigInteger(), nullable=True),
        sa.Column('bases_mapped', sa.BigInteger(), nullable=True),
        sa.Column('bases_mapped_cigar', sa.BigInteger(), nullable=True),
        sa.Column('bases_trimmed', sa.BigInteger(), nullable=True),
        sa.Column('error_rate', sa.Float(), nullable=True),
        sa.Column('insert_size_average', sa.Float(), nullable=True),
        sa.Column('insert_size_standard_deviation', sa.Float(), nullable=True),
        sa.Column('inward_oriented_pairs', sa.BigInteger(), nullable=True),
        sa.Column('mismatches', sa.BigInteger(), nullable=True),
        sa.Column('outward_oriented_pairs', sa.BigInteger(), nullable=True),
        sa.Column('pairs_on_different_chromosomes', sa.BigInteger(), nullable=True),
        sa.Column('pairs_with_other_orientation', sa.BigInteger(), nullable=True),
        sa.Column('reads_mapped', sa.BigInteger(), nullable=True),
        sa.Column('reads_mapped_and_paired', sa.BigInteger(), nullable=True),
        sa.Column('reads_mq0', sa.BigInteger(), nullable=True),
        sa.Column('reads_properly_paired', sa.BigInteger(), nullable=True),
        sa.Column('reads_unmapped', sa.BigInteger(), nullable=True),
        sa.Column('folder_ulid', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ['assembly_id'],
            ['assembly.assembly_id'],
        ),
        sa.ForeignKeyConstraint(
            ['data_id'],
            ['data.data_id'],
        ),
        sa.ForeignKeyConstraint(
            ['folder_ulid'],
            ['folder.folder_ulid'],
        ),
        sa.ForeignKeyConstraint(
            ['software_version_id'],
            ['software_version.software_version_id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )

    # Move some data table columns to mapping_metrics
    data_cols_to_mapping_metrics = (
        'bases_trimmed',
        'reads_mapped',
        'bases_duplicated',
        'outward_oriented_pairs',
        'reads_properly_paired',
        'pairs_on_different_chromosomes',
        'bases_mapped',
        'bases_mapped_cigar',
        'insert_size_standard_deviation',
        'insert_size_average',
        'pairs_with_other_orientation',
        'reads_mapped_and_paired',
        'mismatches',
        'reads_mq0',
        'average_quality',
        'reads_unmapped',
        'error_rate',
        'inward_oriented_pairs',
    )
    move_cols = ', '.join(
        [
            'data_id',
            *data_cols_to_mapping_metrics,
        ]
    )
    move_condition = ' OR '.join(
        f'{c} IS NOT NULL' for c in data_cols_to_mapping_metrics
    )
    op.execute(
        sa.text(f"""
            INSERT INTO mapping_metrics(
              {move_cols}
            )
            SELECT {move_cols}
            FROM data
            WHERE {move_condition}
        """)  # noqa: S608
    )
    for col in data_cols_to_mapping_metrics:
        op.drop_column('data', col)

    op.add_column(
        'accession',
        sa.Column('modified_at', sa.TIMESTAMP(timezone=True), nullable=True),
    )
    op.add_column('accession', sa.Column('modified_by', sa.String(), nullable=True))

    op.add_column(
        'assembly', sa.Column('bioproject_accession_id', sa.String(), nullable=True)
    )
    op.add_column(
        'assembly', sa.Column('genome_accession_id', sa.String(), nullable=True)
    )
    op.create_foreign_key(
        None, 'assembly', 'accession', ['genome_accession_id'], ['accession_id']
    )
    op.create_foreign_key(
        None, 'assembly', 'accession', ['bioproject_accession_id'], ['accession_id']
    )

    # assembly_metrics columns to rename to match mapping_metrics
    for col in (
        'a',
        'c',
        'g',
        't',
        'n',
        'cpg',
    ):
        op.alter_column(
            'assembly_metrics',
            col,
            new_column_name=f'bases_{col}',
        )

    # assembly_metrics columns to rename to match mapping_metrics
    # and change type to BigInteger
    for col in (
        'iupac3',
        'iupac2',
        'ts',
        'tv',
        'cpg_ts',
    ):
        op.alter_column(
            'assembly_metrics',
            col,
            new_column_name=f'bases_{col}',
            type_=sa.BigInteger(),
        )

    op.alter_column(
        'assembly_metrics',
        'scaffold_n',
        new_column_name='scaffolds',
    )
    op.alter_column(
        'assembly_metrics',
        'gap_n',
        new_column_name='gaps',
    )

    # Insert new columns into pacbio_run_metrics, preserving the same order of
    # columns as found in the MLWH.pac_bio_run_well_metrics table.
    with op.batch_alter_table('pacbio_run_metrics', recreate='always') as pb_op:
        pb_op.add_column(
            sa.Column('sequencing_kit_lot_number', sa.String(), nullable=True),
            insert_before='include_kinetics',
        )
        pb_op.add_column(
            sa.Column('cell_lot_number', sa.String(), nullable=True),
            insert_before='include_kinetics',
        )

        pb_op.add_column(
            sa.Column('control_concordance_mean', sa.Float(), nullable=True),
            insert_before='polymerase_read_bases',
        )
        pb_op.add_column(
            sa.Column('control_concordance_mode', sa.Float(), nullable=True),
            insert_before='polymerase_read_bases',
        )
        pb_op.add_column(
            sa.Column('local_base_rate', sa.Float(), nullable=True),
            insert_before='polymerase_read_bases',
        )

        pb_op.add_column(
            sa.Column('productive_zmws_num', sa.Integer(), nullable=True),
            insert_before='p0_num',
        )

        pb_op.add_column(
            sa.Column('adapter_dimer_percent', sa.Float(), nullable=True),
            insert_before='hifi_read_bases',
        )
        pb_op.add_column(
            sa.Column('short_insert_percent', sa.Float(), nullable=True),
            insert_before='hifi_read_bases',
        )

        pb_op.add_column(
            sa.Column('hifi_read_length_mean', sa.Integer(), nullable=True),
            insert_before='hifi_low_quality_num_reads',
        )
        pb_op.add_column(
            sa.Column('hifi_read_quality_median', sa.Integer(), nullable=True),
            insert_before='hifi_low_quality_num_reads',
        )
        pb_op.add_column(
            sa.Column('hifi_number_passes_mean', sa.Float(), nullable=True),
            insert_before='hifi_low_quality_num_reads',
        )
        pb_op.add_column(
            sa.Column('hifi_low_quality_read_bases', sa.BigInteger(), nullable=True),
            insert_before='hifi_low_quality_num_reads',
        )

        pb_op.add_column(
            sa.Column('hifi_low_quality_read_length_mean', sa.Integer(), nullable=True),
            insert_before='folder_ulid',
        )
        pb_op.add_column(
            sa.Column(
                'hifi_low_quality_read_quality_median', sa.Integer(), nullable=True
            ),
            insert_before='folder_ulid',
        )
        pb_op.add_column(
            sa.Column('hifi_barcoded_reads', sa.Integer(), nullable=True),
            insert_before='folder_ulid',
        )
        pb_op.add_column(
            sa.Column('hifi_bases_in_barcoded_reads', sa.BigInteger(), nullable=True),
            insert_before='folder_ulid',
        )


def downgrade() -> None:
    pass
